---

# Workflow for testing Inquiry functionality with a Mistral workflow

chain:

# Executing inquiry workflow via CLI instead of directly via ref so this workflow doesn't get paused
- name: "execute_inquiry_workflow"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 run examples.mistral-ask-basic"
  on-success: "get_inquiry_trigger"

- name: "get_inquiry_trigger"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 trigger-instance list -j --trigger=core.st2.generic.inquiry"
  on-success: "get_inquiry_id"

- name: "get_inquiry_id"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'echo $(st2 inquiry list | grep -o "[0-9a-f]\{24\}" | tail -1)'
  on-success: "get_workflow_id"

- name: "get_workflow_id"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'echo $(st2 execution list -a id --action=examples.mistral-ask-basic | grep -o "[0-9a-f]\{24\}" | tail -1)'
  on-success: "get_workflow_details_1"

- name: "get_workflow_details_1"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'st2 execution get -j {{ get_workflow_id.stdout }}'
  on-success: "invalid_response_expect_failure"

- name: "invalid_response_expect_failure"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 inquiry respond -r '{\"secondfactor\": 123}' {{ get_inquiry_id.stdout }}"
  on-failure: "pause_after_invalid_response"
  on-success: "fail"

- name: "pause_after_invalid_response"
  ref: "core.pause"
  params:
    max_pause: 5
  on-success: "get_workflow_details_2"

- name: "get_workflow_details_2"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'st2 execution get -j {{ get_workflow_id.stdout }}'
  on-success: "valid_response"

- name: "valid_response"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 inquiry respond -r '{\"secondfactor\": \"bar\"}' {{ get_inquiry_id.stdout }}"
  on-success: "pause_after_valid_response"

- name: "pause_after_valid_response"
  ref: "core.pause"
  params:
    max_pause: 5
  on-success: "get_workflow_details_3"

- name: "get_workflow_details_3"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'st2 execution get -j {{ get_workflow_id.stdout }}'
  on-success: "duplicate_response_expect_failure"

- name: "duplicate_response_expect_failure"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 inquiry respond -r '{\"secondfactor\": \"bar\"}' {{ get_inquiry_id.stdout }}"
  on-success: "fail"
  on-failure: assert_triggers

###########
# ASSERTS #
###########

- name: "assert_triggers"
  ref: "asserts.object_key_string_equals"
  params:
    object: "{{ get_inquiry_trigger.stdout[0] }}"
    key: status
    value: processed
  on-success: "assert_workflow_paused_prep"

# Temporary hack because st2 execution get prints invalid json for workflows
- name: "assert_workflow_paused_prep"
  ref: "core.local"
  params:
    cmd: echo " { $(echo '{{ get_workflow_details_1.stdout }}' | grep paused) } "
  on-success: "assert_workflow_paused"

- name: "assert_workflow_paused"
  ref: "asserts.object_equals"
  params:
    object: "{{ assert_workflow_paused_prep.stdout }}"
    expected:
      status: paused
  on-success: "assert_workflow_still_paused_prep"


# Temporary hack because st2 execution get prints invalid json for workflows
- name: "assert_workflow_still_paused_prep"
  ref: "core.local"
  params:
    cmd: echo " { $(echo '{{ get_workflow_details_2.stdout }}' | grep paused) } "
  on-success: "assert_workflow_still_paused"

- name: "assert_workflow_still_paused"
  ref: "asserts.object_equals"
  params:
    object: "{{ assert_workflow_still_paused_prep.stdout }}"
    expected:
      status: paused
  on-success: "assert_workflow_succeeded_prep"


# Temporary hack because st2 execution get prints invalid json for workflows
- name: "assert_workflow_succeeded_prep"
  ref: "core.local"
  params:
    cmd: echo " { $(echo '{{ get_workflow_details_3.stdout }}' | grep succeeded | head -1) } "
  on-success: "assert_workflow_succeeded"

- name: "assert_workflow_succeeded"
  ref: "asserts.object_equals"
  params:
    object: "{{ assert_workflow_succeeded_prep.stdout }}"
    expected:
      succeeded: True
  on-success: "assert_workflow_expected_output_prep"


# Temporary hack because st2 execution get prints invalid json for workflows
- name: "assert_workflow_expected_output_prep"
  ref: "core.local"
  params:
    cmd: echo " { $(echo '{{ get_workflow_details_3.stdout }}' | grep authenticate | sed 's/,//g') } "
  on-success: "assert_workflow_expected_output"

- name: "assert_workflow_expected_output"
  ref: "asserts.object_key_string_equals"
  params:
    object: "{{ assert_workflow_expected_output_prep.stdout }}"
    key: stdout
    value: We can now authenticate to foo service with bar

- name: "fail"
  ref: core.local
  cmd: exit 1
