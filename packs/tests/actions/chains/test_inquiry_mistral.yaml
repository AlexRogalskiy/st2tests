---

# Workflow for testing Inquiry functionality with a Mistral workflow

chain:

# Executing inquiry workflow via CLI instead of directly via ref so this workflow doesn't get paused
- name: "execute_inquiry_workflow"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 run examples.mistral-ask-basic"
  on-success: "get_inquiry_trigger"

- name: "get_inquiry_trigger"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 trigger-instance list -j --trigger=core.st2.generic.inquiry"
  on-success: "get_inquiry_id"

- name: "get_inquiry_id"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'echo $(st2 inquiry list | grep -o "[0-9a-f]\{24\}" | tail -1)'
  on-success: "get_workflow_id"

- name: "get_workflow_id"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: 'echo $(st2 execution list -a id --action=examples.mistral-ask-basic | grep -o "[0-9a-f]\{24\}" | tail -1)'
  on-success: "assert_workflow_paused_prep"

- name: "assert_workflow_paused_prep"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 execution get -dj {{ get_workflow_id.stdout }} | python -c \"import sys, json; output=json.load(sys.stdin); print(output.get('status', None))\""
  on-success: "assert_workflow_paused"

- name: "assert_workflow_paused"
  ref: "asserts.object_equals"
  params:
    object:
      status: "{{ assert_workflow_paused_prep.stdout }}"
    expected:
      status: "paused"
  on-success: "invalid_response_expect_failure"

- name: "invalid_response_expect_failure"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 inquiry respond -r '{\"secondfactor\": 123}' {{ get_inquiry_id.stdout }}"
  on-failure: "pause_after_invalid_response"
  on-success: "fail"

- name: "pause_after_invalid_response"
  ref: "core.pause"
  params:
    max_pause: 5
  on-success: "assert_workflow_still_paused_prep"

- name: "assert_workflow_still_paused_prep"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 execution get -dj {{ get_workflow_id.stdout }} | python -c \"import sys, json; output=json.load(sys.stdin); print(output.get('status', None))\""
  on-success: "assert_workflow_still_paused"

- name: "assert_workflow_still_paused"
  ref: "asserts.object_equals"
  params:
    object:
      status: "{{ assert_workflow_still_paused_prep.stdout }}"
    expected:
      status: "paused"
  on-success: "post_valid_response"

- name: "post_valid_response"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 inquiry respond -r '{\"secondfactor\": \"bar\"}' {{ get_inquiry_id.stdout }}"
  on-success: "pause_after_valid_response"

- name: "pause_after_valid_response"
  ref: "core.pause"
  params:
    max_pause: 5
  on-success: "assert_workflow_succeeded_prep"

- name: "assert_workflow_succeeded_prep"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 execution get -dj {{ get_workflow_id.stdout }} | python -c \"import sys, json; output=json.load(sys.stdin); print(output.get('status', None))\""
  on-success: "assert_inquiry_task_succeeded_prep"

- name: "assert_inquiry_task_succeeded_prep"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 execution get -dj {{ get_workflow_id.stdout }} | python -c \"import sys, json; output=json.load(sys.stdin); tasks = list(filter(lambda x: x.get('name', None) == 'task1', output['result']['tasks'])); print(tasks[0].get('state', None))\""
  on-success: "assert_inquiry_task_succeeded"
  on-failure: "resume_workflow_manually"

- name: "assert_inquiry_task_succeeded"
  ref: "asserts.object_equals"
  params:
    object:
      status: "{{ assert_inquiry_task_succeeded_prep.stdout }}"
    expected:
      status: "SUCCESS"
  on-success: "assert_workflow_succeeded"
  on-failure: "assert_inquiry_task_running"

- name: "assert_workflow_succeeded"
  ref: "asserts.object_equals"
  params:
    object:
      status: "{{ assert_workflow_succeeded_prep.stdout }}"
    expected:
      status: "succeeded"
  on-success: "assert_workflow_expected_output_prep"
  on-failure: "assert_workflow_stuck_in_paused"

- name: "assert_workflow_expected_output_prep"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 execution get -dj {{ get_workflow_id.stdout }} | python -c \"import sys, json; output=json.load(sys.stdin); tasks = list(filter(lambda x: x.get('name', None) == 'task2', output['result']['tasks'])); print(tasks[0].get('result', {}).get('stdout', None))\""
  on-success: "assert_workflow_expected_output"

- name: "assert_workflow_expected_output"
  ref: "asserts.object_equals"
  params:
    object:
      stdout: "{{ assert_workflow_expected_output_prep.stdout }}"
    expected:
      stdout: "We can now authenticate to 'foo' service with bar"
  on-success: "duplicate_response_expect_failure"

- name: "duplicate_response_expect_failure"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 inquiry respond -r '{\"secondfactor\": \"bar\"}' {{ get_inquiry_id.stdout }}"
  on-success: "fail"
  on-failure: assert_triggers

- name: "assert_triggers"
  ref: "asserts.object_key_string_equals"
  params:
    object: "{{ get_inquiry_trigger.stdout[0] }}"
    key: status
    value: processed

- name: "assert_inquiry_task_running"
  ref: "asserts.object_equals"
  params:
    object:
      status: "{{ assert_inquiry_task_succeeded_prep.stdout }}"
    expected:
      status: "RUNNING"
  on-success: "assert_workflow_stuck_in_paused"

- name: "assert_workflow_stuck_in_paused"
  ref: "asserts.object_equals"
  params:
    object:
      status: "{{ assert_workflow_succeeded_prep.stdout }}"
    expected:
      status: "paused"
  on-success: "resume_workflow_manually"

- name: "resume_workflow_manually"
  ref: "core.local"
  params:
    env:
      ST2_BASE_URL: "{{protocol}}://{{hostname}}"
      ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
      ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
      ST2_AUTH_TOKEN: "{{token}}"
    cmd: "st2 execution resume {{ get_workflow_id.stdout }}"
  on-success: "pause_after_valid_response"

- name: "fail"
  ref: core.local
  cmd: exit 1
